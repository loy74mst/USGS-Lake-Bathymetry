# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# ContourQA_ModelBuilderArcPyTemplate.py
# Created on: 2021-09-29 14:27:20.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: ContourQA_ModelBuilderArcPyTemplate <Output_QA_Geodatabase> <Final_xyz_map_thinned_Points> <Lake_Name> <Buffer_Distance> <QA_Folder> <Final_Contours>
# Description: This tool conducts the QA of the contours produced from the lake's TIN surface. The goal is to compare the accuracy of the contour elevation in a given place to the Map=1 point in a small buffer distance from the contour line.
# ---------------------------------------------------------------------------

# Script arguments
Output_QA_Geodatabase = arcpy.GetParameterAsText(0)
QA_Folder = arcpy.GetParameterAsText(1)
Lake_Name = arcpy.GetParameterAsText(2)
Final_xyz_map_thinned_Points = arcpy.GetParameterAsText(3)
Final_Contours = arcpy.GetParameterAsText(4)
Buffer_Distance = arcpy.GetParameterAsText(5)
if Buffer_Distance == '#' or not Buffer_Distance:
    Buffer_Distance = "0.1 Meters" # provide a default value if unspecified



# Local variables:
contourBuffer = Output_QA_Geodatabase + "\\" + Lake_Name + "_contourBuffer"
contourMapClip = Output_QA_Geodatabase + "\\" + Lake_Name + "_contourMapClip"
contourQAjoin = Output_QA_Geodatabase + "\\" + Lake_Name + "_contourQAjoin"
contourQA_xls = QA_Folder + "\\" + Lake_Name + "_contourQA.xls"

# Process: Buffer --> Buffering the contours
arcpy.AddMessage("Making the contour buffers...")
arcpy.Buffer_analysis(Final_Contours, contourBuffer, Buffer_Distance, "FULL", "ROUND", "NONE", "", "PLANAR")

# Process: Clip --> Clipping the Map=1 points to the contour buffers
arcpy.AddMessage("Removing points outside of the buffers...")
arcpy.Clip_analysis(Final_xyz_map_thinned_Points, contourBuffer, contourMapClip, "")

# Process: Spatial Join --> Joining the contour values to the points within its buffer
arcpy.AddMessage("Adding the contour elevation to each point within the buffers...")
arcpy.SpatialJoin_analysis(contourMapClip, Final_Contours, contourQAjoin, "JOIN_ONE_TO_ONE", "KEEP_ALL", "", "CLOSEST", "", "")

# Process: Table to Table
#arcpy.TableToTable_conversion(v_Lake_Name__contourQAjoin, Output_QA_Geodatabase, "%Lake Name%_contourQAtable", "", "Id \"Id\" true true false 4 Long 0 0 ,First,#,%Output QA Geodatabase%\\%Lake Name%_contourQAjoin,Id,-1,-1;Contour \"Contour\" true true false 8 Double 0 0 ,First,#,%Output QA Geodatabase%\\%Lake Name%_contourQAjoin,Contour,-1,-1;InLine_FID \"InLine_FID\" true true false 4 Long 0 0 ,First,#,%Output QA Geodatabase%\\%Lake Name%_contourQAjoin,InLine_FID,-1,-1;X \"X\" true true false 8 Double 0 0 ,First,#,%Output QA Geodatabase%\\%Lake Name%_contourQAjoin,X,-1,-1;Y \"Y\" true true false 8 Double 0 0 ,First,#,%Output QA Geodatabase%\\%Lake Name%_contourQAjoin,Y,-1,-1;Z \"Z\" true true false 8 Double 0 0 ,First,#,%Output QA Geodatabase%\\%Lake Name%_contourQAjoin,Z,-1,-1;CUBE_Uncert \"CUBE Uncert\" true true false 8 Double 0 0 ,First,#,%Output QA Geodatabase%\\%Lake Name%_contourQAjoin,CUBE_Uncert,-1,-1;Map \"Map\" true true false 4 Long 0 0 ,First,#,%Output QA Geodatabase%\\%Lake Name%_contourQAjoin,Map,-1,-1;QA \"QA\" true true false 4 Long 0 0 ,First,#,%Output QA Geodatabase%\\%Lake Name%_contourQAjoin,QA,-1,-1;Rand \"Rand\" true true false 4 Long 0 0 ,First,#,%Output QA Geodatabase%\\%Lake Name%_contourQAjoin,Rand,-1,-1;Source \"Source\" true true false 8000 Text 0 0 ,First,#,%Output QA Geodatabase%\\%Lake Name%_contourQAjoin,Source,-1,-1;Shape_Length \"Shape_Length\" false true true 8 Double 0 0 ,First,#,%Output QA Geodatabase%\\%Lake Name%_contourQAjoin,Shape_Length,-1,-1", "")

# Process: Table To Excel --> Exporting the contourQA table to an Excel document
arcpy.AddMessage("Exporting to the contourQA Excel document...")
arcpy.TableToExcel_conversion(contourQAjoin, contourQA_xls, "ALIAS", "CODE")


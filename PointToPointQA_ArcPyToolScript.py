# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# PointToPointQA_ModelBuilderArcPyTemplate.py
# Created on: 2021-09-29 14:18:56.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: PointToPointQA_ModelBuilderArcPyTemplate <Xcheck_CSV_File> <Lake_Name> <Output_QA_Geodatabase> <Full_Bathy_Points_Dataset> <Buffer_Distance> <QA_Folder>
# Description:This QA process measures point-to-point repeatability. The goal is to see how accurate the full multibeam points dataset is compared to high-resolution cross-check (xcheck) points.
# ---------------------------------------------------------------------------

# Script arguments
Output_QA_Geodatabase = arcpy.GetParameterAsText(0)
QA_Folder = arcpy.GetParameterAsText(1)
Lake_Name = arcpy.GetParameterAsText(2)
Xcheck_CSV_File = arcpy.GetParameterAsText(3)
Full_Bathy_Points_Dataset = arcpy.GetParameterAsText(4)
Buffer_Distance = arcpy.GetParameterAsText(5)
if Buffer_Distance == '#' or not Buffer_Distance:
    Buffer_Distance = "0.05 Meters" # provide a default value if unspecified


# Local variables:
xcheck_Layer = "xcheck_Layer"
xcheck_points_name = Lake_Name+"_xcheck"
xcheck_points = Output_QA_Geodatabase+"\\"+Lake_Name+"_xcheck"
p2pQA_MBclip_Layer = "p2pQA_MBclip_Layer"
p2pQA_MBclip_Layer2 = p2pQA_MBclip_Layer
p2pQA_extent = Output_QA_Geodatabase+"\\"+Lake_Name+"_p2pQA_extent"
p2pQA_MBclip = Output_QA_Geodatabase+"\\"+Lake_Name+"_p2pQA_MBclip"
p2pQA_MBbuffer = Output_QA_Geodatabase+"\\"+Lake_Name+"_p2pQA_MBbuffer"
p2pQA_select = Output_QA_Geodatabase+"\\"+Lake_Name+"_p2pQA_select"
p2pQA = Output_QA_Geodatabase+"\\"+Lake_Name+"_p2pQA"
p2pQA_xls = QA_Folder+"\\"+Lake_Name+"_p2pQA.xls"


# Process: Make XY Event Layer--Reading in the xcheck points as a layer
arcpy.AddMessage("Reading in the xcheck points...")
arcpy.MakeXYEventLayer_management(Xcheck_CSV_File, "x", "y", xcheck_Layer, "PROJCS['NAD_1983_2011_UTM_Zone_15N',GEOGCS['GCS_NAD_1983_2011',DATUM['D_NAD_1983_2011',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-93.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]];-5120900 -9998100 10000;-100000 10000;-100000 10000;0.001;0.001;0.001;IsHighPrecision", "Zxcheck")

# Process: Feature Class to Feature Class--Exporting the xcheck points layer to a feature class
arcpy.AddMessage("Exporting xcheck points to a new feature class...")
arcpy.FeatureClassToFeatureClass_conversion(xcheck_Layer, Output_QA_Geodatabase, xcheck_points_name, "", "X \"X\" true true false 8 Double 0 0 ,First,#,MilanCityLake_xcheck_Layer,X,-1,-1;Y \"Y\" true true false 8 Double 0 0 ,First,#,MilanCityLake_xcheck_Layer,Y,-1,-1;Z \"Z\" true true false 8 Double 0 0 ,First,#,MilanCityLake_xcheck_Layer,Z,-1,-1", "")

# Process: Minimum Bounding Geometry--finding the smallest possible rectangle that contains the xcheck points
arcpy.AddMessage("Finding the extent of the xcheck points...")
arcpy.MinimumBoundingGeometry_management(xcheck_points, p2pQA_extent, "RECTANGLE_BY_AREA", "ALL", "", "NO_MBG_FIELDS")

# Process: Clip--Clipping out the bathy points that lie outside the xcheck-bounding rectangle
arcpy.AddMessage("Clipping away excess points...")
arcpy.Clip_analysis(Full_Bathy_Points_Dataset, p2pQA_extent, p2pQA_MBclip, "")

# Process: Make Feature Layer--ugly but necessary conversion to select points
arcpy.MakeFeatureLayer_management(p2pQA_MBclip, p2pQA_MBclip_Layer, "", "", "OBJECTID OBJECTID VISIBLE NONE;Shape Shape VISIBLE NONE;X X VISIBLE NONE;Y Y VISIBLE NONE;Z Z VISIBLE NONE;CUBE_Uncer CUBE_Uncer VISIBLE NONE;Map Map VISIBLE NONE;QA QA VISIBLE NONE;Source Source VISIBLE NONE")

# Process: Buffer--Buffering the MB points
arcpy.AddMessage("Buffering the multibeam points...")
arcpy.Buffer_analysis(p2pQA_MBclip, p2pQA_MBbuffer, Buffer_Distance, "FULL", "ROUND", "NONE", "", "PLANAR")

# Process: Clip (2)--Clipping away the xcheck points that are outside the individual MB buffers
arcpy.AddMessage("Clipping away the xcheck points outside the MB buffers...")
arcpy.Clip_analysis(xcheck_points, p2pQA_MBbuffer, p2pQA_select, "")


########ISSUE ZONE
# Process: Select Layer By Location--Selecting only the MB points that have xcheck points within 0.05 meters
arcpy.AddMessage("Selecting only the MB points that have a xcheck point in the immediate vicinity...")

# Process: Select Layer By Location
arcpy.SelectLayerByLocation_management(p2pQA_MBclip_Layer, "WITHIN_A_DISTANCE", p2pQA_select, "0.05 Meters", "NEW_SELECTION", "NOT_INVERT")
# Process: Spatial Join
p2pQA_MBclip_Layer=p2pQA_MBclip_Layer
arcpy.SpatialJoin_analysis(p2pQA_MBclip_Layer, p2pQA_select, p2pQA, "JOIN_ONE_TO_ONE", "KEEP_ALL","","CLOSEST", "", "")



# Process: Table To Excel--Exporting the p2pQA table to an Excel document
arcpy.AddMessage("Exporting the multibeam table to an Excel document...")
arcpy.TableToExcel_conversion(p2pQA, p2pQA_xls, "ALIAS", "CODE")


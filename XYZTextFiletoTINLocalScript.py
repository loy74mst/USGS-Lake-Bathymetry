# -*- coding: utf-8 -*-
"""
XYZtoTIN
==============

Script:   XYZtoTIN.py

Author:   loyler@usgs.gov

Modified: 2021-07-12

Purpose:  Converting an XYZ_uncert_source text file into points joined with LiDAR that can then be

Useage:

References:

:---------------------------------------------------------------------:
"""
# ---------------------------------------------------------------------------
# XYZtoTINModelBuilderArcPyTemplate.py
# Created on: 2021-07-09 14:46:13.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: XYZtoTINModelBuilderArcPyTemplate <Output_Folder> <Spatial_Reference> <XYZ_Shapefile_Name> <LAS_Shapefile_Name> <Input_XYZ_Table> <Input_LAS_Table> <Original_Lake_Polygon> <Output_Buffer_Name_with_File_Path_and_Extension> <Buffer_Distance> <Minimum_Allowed_Distance_XYZ> <Minimum_Allowed_Distance_LAS>
# Description:
# This model is a multi-step process for thinning CUBEd XYZ bathymetry and LiDAR data after it has been combined, filtered, and exported in R. The model reads in the raw X,Y,Z columns from a .csv or .txt table, makes a layer, creates a buffer that will contain the thinned LiDAR points, erases points within specified boundaries, removes points that are within a specified distance of each other, and outputs new shapefiles and tables.

# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
#Checking to make sure the appropriate extensions are activated
class LicenseError(Exception):
    pass

try:
    if arcpy.CheckExtension("3D") == "Available":
        arcpy.CheckOutExtension("3D")
    else:
        # raise a custom exception
        raise LicenseError
except LicenseError:
    print("3D Analyst license is unavailable")
except arcpy.ExecuteError:
    print(arcpy.GetMessages(2))


#Timing how long it takes to run each function
from datetime import datetime
start_time = datetime.now()

#Function definition:
def XYZTextFileToTIN(LakeName,Home_Dir, Input_XYZ_Table, Input_LAS_Table,
                     LidarBoundsPolygon, Map_Resolution):


    # Setting the environments outputs can be overwritten if the code is run multiple times and setting the output workspace
    Output_GDB = Home_Dir + "\\" + LakeName + ".gdb"
    arcpy.env.overwriteOutput = True
    arcpy.env.workspace = Output_GDB

    #Setting local variables
    X_Field = "X"
    Y_Field = "Y"
    Z_Field = "Z"
    xyz_uncert_source_Layer = "xyz_uncert_source_Layer"
    temp_las = "temp_las"
    Inner_buffer_path = Output_GDB + "\\InnerBuffer"
    Outer_buffer_path = Output_GDB + "\\OuterBuffer"
    Big_outside_buffer_path = Output_GDB + "\\BigOutsideBuffer"
    Spatial_Reference = "PROJCS['NAD_1983_2011_UTM_Zone_15N',GEOGCS['GCS_NAD_1983_2011',DATUM['D_NAD_1983_2011',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-93.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]];-5120900 -9998100 10000;-100000 10000;-100000 10000;0.001;0.001;0.001;IsHighPrecision" # provide a default value if unspecified
    Minimum_Allowed_Distance_XYZ = Map_Resolution - 0.01
    XYZ_Shapefile_Name = LakeName + "_xyz"
    LAS_Shapefile_Name = LakeName + "_las"

    if Output_GDB == '#' or not Output_GDB:
        Output_GDB = "C:\\Users\\loyler\\Documents\\ArcGIS\\Default.gdb"  # provide a default value if unspecified

    if Minimum_Allowed_Distance_XYZ == '#' or not Minimum_Allowed_Distance_XYZ:
        Minimum_Allowed_Distance_XYZ = "0.5 Meters"  # provide a default value if unspecified

    ##Making buffers that will be used to create a 3 meter gap between the MB and the LiDAR to make sure they don't overlap

    # Process: Inner Buffer
    Inner_buffer = arcpy.Buffer_analysis(LidarBoundsPolygon, Inner_buffer_path, "-1.5 Meters", "FULL", "ROUND", "NONE", "", "PLANAR")
    # Process: Outer Buffer
    Outer_buffer = arcpy.Buffer_analysis(LidarBoundsPolygon, Outer_buffer_path, "1.5 Meters", "FULL", "ROUND", "NONE", "", "PLANAR")
    #Process: Big outside buffer that selects only relevant LiDAR points
    Big_outside_buffer = arcpy.Buffer_analysis(LidarBoundsPolygon, Big_outside_buffer_path, "500 Meters", "FULL", "ROUND","NONE", "", "PLANAR")
    ##XYZ Points Processing : Output Feature class, thinning, and erasing points outside the buffer

    # Process: Make XY Event Layer
    arcpy.MakeXYEventLayer_management(Input_XYZ_Table, X_Field, Y_Field, xyz_uncert_source_Layer, Spatial_Reference, Z_Field)
    # Process: XYZ Feature Class to Feature Class
    MBextent = arcpy.FeatureClassToFeatureClass_conversion(xyz_uncert_source_Layer, Output_GDB, XYZ_Shapefile_Name,"","","")

    # Process: Making a basic minimum bounding geometry polygon from the thinned MB points
    MBpoly_name = Output_GDB + "\\" + LakeName + "_MBpoly"
    arcpy.MinimumBoundingGeometry_management(
        in_features=MBextent,
        out_feature_class=MBpoly_name,
        geometry_type="CONVEX_HULL", group_option="ALL", group_field="", mbg_fields_option="NO_MBG_FIELDS")

    # Process: XYZ_Uncert_Source Create Random Points
    xyz_uncert_source_crp = arcpy.CreateRandomPoints_management(Output_GDB,
                                        XYZ_Shapefile_Name + "_crp",
                                        XYZ_Shapefile_Name,
                                        "",
                                        4000000,
                                        Minimum_Allowed_Distance_XYZ,
                                        "POINT",
                                        "0")

    # Process: XYZ_Uncert_Source Erase Point
    arcpy.ErasePoint_edit(xyz_uncert_source_crp, Inner_buffer, "OUTSIDE")

    xyz_uncert_source_joined = arcpy.SpatialJoin_analysis(xyz_uncert_source_crp,
                               XYZ_Shapefile_Name,
                               XYZ_Shapefile_Name + "_thinned")


    ###Lidar Processing
    # Process: Make XY Event Layer
    arcpy.MakeXYEventLayer_management(Input_LAS_Table, X_Field, Y_Field, temp_las, Spatial_Reference, Z_Field)
    # Process: LAS Feature Class to Feature Class
    arcpy.FeatureClassToFeatureClass_conversion(temp_las, Output_GDB, LAS_Shapefile_Name, "", "", "")

    # Process: LAS Erase Point (removes all of the irrelevant points outside the general lake region of interest
    arcpy.ErasePoint_edit(LAS_Shapefile_Name, Big_outside_buffer, "OUTSIDE")

    # Process: LAS Create Random Points
    las_crp = arcpy.CreateRandomPoints_management(Output_GDB,
                                                  LAS_Shapefile_Name + "_crp",
                                                  LAS_Shapefile_Name,
                                                  "",
                                                  4000000,
                                                  Minimum_Allowed_Distance_XYZ,
                                                  "POINT",
                                                  "0")

    # Process: LAS Erase Point (removes all points within 1.5 meters of the lake polygon)
    arcpy.ErasePoint_edit(las_crp, Outer_buffer, "INSIDE")

    # Process: Spatial join attribute table from original LAS file
    las_joined = arcpy.SpatialJoin_analysis(las_crp,
                               LAS_Shapefile_Name,
                               LAS_Shapefile_Name + "_thinned")


    ###Creating the Preliminary TIN from the thinned points, LiDAR, and lake polygon:
    #tin_params = xyz_uncert_source_joined + ' Z Mass_points <None>;' + las_joined + ' Z Mass_points <None>'
    #arcpy.env.workspace = Home_Dir + "\\"
    #arcpy.CreateTin_3d(LakeName + '_prelimTIN', Spatial_Reference,
     #                  [xyz_uncert_source_joined,'Z','Mass_points',None],[las_joined,'Z','Mass_points',None])

    #xyz_TIN_portion = Output_GDB + "\\" + LakeName + "_xyz_thinned"
    #las_TIN_portion = Output_GDB + "\\" + LakeName + "_las_thinned"


    #arcpy.CreateTin_3d(out_tin=LakeName + "_prelimTIN",
    #                   spatial_reference="PROJCS['NAD_1983_2011_UTM_Zone_15N',GEOGCS['GCS_NAD_1983_2011',DATUM['D_NAD_1983_2011',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-93.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]",
     #                  in_features=[las_TIN_portion + ' Z Mass_Points <None>',xyz_TIN_portion + ' Z Mass_Points <None>'],
      #                 constrained_delaunay="DELAUNAY")


#Running the function itself:
XYZTextFileToTIN(LakeName="GardenCityOld",
                 Home_Dir="E:\\HYPACK_Projects\\2020_DNR_Lakes\\2020-07_GardenCityOld\\GIS",
                 Input_XYZ_Table="E:\\HYPACK_Projects\\2020_DNR_Lakes\\2020-07_GardenCityOld\\RTextFiles\\GardenCityOld_xyz_uncert_source.csv",
                 Input_LAS_Table="E:\\HYPACK_Projects\\2020_DNR_Lakes\\2020-07_GardenCityOld\\RTextFiles\\GardenCityOld_las.txt",
                 LidarBoundsPolygon="E:\\HYPACK_Projects\\2020_DNR_Lakes\\2020-07_GardenCityOld\\GIS\\GardenCityOld.gdb\\GardenCityOld_lidarbounds",
                 Map_Resolution=0.5)

end_time = datetime.now()
print('Duration: {}'.format(end_time - start_time))

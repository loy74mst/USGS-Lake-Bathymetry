# -*- coding: utf-8 -*-
"""
XYZtoTIN
==============

Script:   XYZtoTIN.py

Author:   loyler@usgs.gov

Modified: 2021-07-12

Purpose:  Converting an XYZ_uncert_source text file into points joined with LiDAR that can then be

Useage:

References:

:---------------------------------------------------------------------:
"""
# ---------------------------------------------------------------------------
# XYZtoTINModelBuilderArcPyTemplate.py
# Created on: 2021-07-09 14:46:13.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: XYZtoTINModelBuilderArcPyTemplate <Output_Folder> <Spatial_Reference> <XYZ_Shapefile_Name> <LAS_Shapefile_Name> <Input_XYZ_Table> <Input_LAS_Table> <Original_Lake_Polygon> <Output_Buffer_Name_with_File_Path_and_Extension> <Buffer_Distance> <Minimum_Allowed_Distance_XYZ> <Minimum_Allowed_Distance_LAS>
# Description:
# This model is a multi-step process for thinning CUBEd XYZ bathymetry and LiDAR data after it has been combined, filtered, and exported in R. The model reads in the raw X,Y,Z columns from a .csv or .txt table, makes a layer, creates a buffer that will contain the thinned LiDAR points, erases points within specified boundaries, removes points that are within a specified distance of each other, and outputs new shapefiles and tables.

# ---------------------------------------------------------------------------

# Set the necessary product code
import arceditor

# Import arcpy module
import arcpy
import os

# Script arguments
Output_Geodatabase = arcpy.GetParameterAsText(0)
if Output_Folder == '#' or not Output_Folder:
    Output_Folder = "C:\\Users\\loyler\\Documents\\ArcGIS\\Default.gdb" # provide a default value if unspecified

Spatial_Reference = arcpy.GetParameterAsText(1)
if Spatial_Reference == '#' or not Spatial_Reference:
    Spatial_Reference = "PROJCS['NAD_1983_2011_UTM_Zone_15N',GEOGCS['GCS_NAD_1983_2011',DATUM['D_NAD_1983_2011',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-93.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]];-5120900 -9998100 10000;-100000 10000;-100000 10000;0.001;0.001;0.001;IsHighPrecision" # provide a default value if unspecified

XYZ_Shapefile_Name = arcpy.GetParameterAsText(2)

LAS_Shapefile_Name = arcpy.GetParameterAsText(3)

Input_XYZ_Table = arcpy.GetParameterAsText(4)

Input_LAS_Table = arcpy.GetParameterAsText(5)

Original_Lake_Polygon = arcpy.GetParameterAsText(6)

Half_Interpoint_Distance = arcpy.GetParameterAsText(9)

Minimum_Allowed_Distance_XYZ = arcpy.GetParameterAsText(9)
if Minimum_Allowed_Distance_XYZ == '#' or not Minimum_Allowed_Distance_XYZ:
    Minimum_Allowed_Distance_XYZ = "0.5 Meters" # provide a default value if unspecified

Minimum_Allowed_Distance_LAS = arcpy.GetParameterAsText(10)
if Minimum_Allowed_Distance_LAS == '#' or not Minimum_Allowed_Distance_LAS:
    Minimum_Allowed_Distance_LAS = "0 Meters" # provide a default value if unspecified




#Local variables:
X_Field = "X"
Y_Field = "Y"
Z_Field = "Z"
xyz_uncert_source_Layer = "xyz_uncert_source_Layer"
Inner_buffer_path = Output_Folder + "\\InnerBuffer.shp"
Outer_buffer_path = Output_Folder + "\\OuterBuffer.shp"

##Making buffers that will be used to create a 3 meter gap between the MB and the LiDAR to make sure they don't overlap

# Process: Inner Buffer
Inner_buffer = arcpy.Buffer_analysis(Original_Lake_Polygon, Buffer, "-1.5 Meters", "FULL", "ROUND", "NONE", "", "PLANAR")
# Process: Outer Buffer
Outer_buffer = arcpy.Buffer_analysis(Original_Lake_Polygon, Temp_insidebuffer, "1.5 Meters", "FULL", "ROUND", "NONE", "", "PLANAR")

##XYZ Points Processing : Output Feature class, thinning, and erasing points outside the buffer

# Process: Make XY Event Layer
arcpy.MakeXYEventLayer_management(Input_XYZ_Table, X_Field, Y_Field, xyz_uncert_source_Layer, Spatial_Reference, Z_Field)
# Process: Feature Class to Feature Class
arcpy.FeatureClassToFeatureClass_conversion(xyz_uncert_source_Layer, Output_Folder, XYZ_Shapefile_Name)
# Process: XYZ_Uncert_Source Create Random Points
xyz_uncert_source_crp = arcpy.CreateRandomPoints_management(Output_Folder,
                                    XYZ_Shapefile_Name + "_thinned.shp",
                                    XYZ_Shapefile_Name,
                                    4000000,
                                    Minimum_Allowed_Distance_XYZ,
                                    "POINT",
                                    "0")

# Process: XYZ_Uncert_Source Erase Point

arcpy.ErasePoint_edit(xyz_uncert_source_crp, Inner_buffer, "OUTSIDE")

# Process: Add Geometry Attributes
arcpy.AddGeometryAttributes_management(v_XYZ_Shapefile_Name__thinned_shp, "POINT_X_Y_Z_M", "METERS", "", "PROJCS['NAD_1983_2011_UTM_Zone_15N',GEOGCS['GCS_NAD_1983_2011',DATUM['D_NAD_1983_2011',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-93.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]")




###Lidar Processing

arcpy.MakeXYEventLayer_management(Input_LAS_Table, X_Field, Y_Field, Viking_las_Layer, Spatial_Reference__2_, Z_Field__2_)






# Process: Make XY Event Layer

# Process: Feature Class to Feature Class (2)
arcpy.FeatureClassToFeatureClass_conversion(Viking_las_Layer, Output_Folder, "%LAS Shapefile Name%.shp", "", "", "")

# Process: Create Random Points (2)
arcpy.CreateRandomPoints_management(Output_Folder, "%LAS Shapefile name%_thinned.shp", v_LAS_Shapefile_Name__shp, "0 0 250 250", "4000000", Minimum_Allowed_Distance_LAS, "POINT", "0")


# Process: Erase Point
arcpy.ErasePoint_edit(LAS_Shapefile_name__thinned_shp__4_, Buffer, "OUTSIDE")

# Process: Erase Point (3)
arcpy.ErasePoint_edit(LAS_Shapefile_name__thinned_shp__2_, Original_Lake_Polygon, "INSIDE")

# Process: Add Geometry Attributes (2)
arcpy.AddGeometryAttributes_management(LAS_Shapefile_name__thinned_shp__3_, "POINT_X_Y_Z_M", "METERS", "", "PROJCS['NAD_1983_2011_UTM_Zone_15N',GEOGCS['GCS_NAD_1983_2011',DATUM['D_NAD_1983_2011',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-93.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]")


